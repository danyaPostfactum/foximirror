<?xml version="1.0"?>

<bindings id="debugBindings"
   xmlns="http://www.mozilla.org/xbl"
   xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
   xmlns:xbl="http://www.mozilla.org/xbl"
   xmlns:html="http://www.w3.org/1999/xhtml">

  <binding id="parseerror">
    <content hidevscroll="true" hidehscroll="true">
      <children/>
      1222
    </content>
	<implementation>
      <constructor>        
      </constructor>
      <field name="_lastSelectedRow">
        -1
      </field>
    </implementation>
    <handlers>
      <handler event="click" button="0" clickcount="1">
      <![CDATA[
       document.location.reload()
      ]]>
      </handler> 
	 <handler event="click" button="2" clickcount="1">
      <![CDATA[
		var lineNumber = null;
      	openDialog("chrome://global/content/viewSource.xul", "_blank", "all,dialog=no", document.location, null, null, lineNumber, null);
      ]]>
      </handler> 
    </handlers>
  </binding>
  
  
  
  
<binding id="shadiaGlue">
    <content>
		<xul:arrowscrollbox aID='actionbar'/>	
		<xul:menulist  type='menu' label='tools' class='plain' sizetopopup='false' align='center'>
			<xul:menupopup aID='actionpopup' onpopupshowing='_popupshown(this)'/>	
		</xul:menulist>
    </content>
	
	<resources>
		<stylesheet src="debug.css"/>
    </resources>
	
	<implementation>
		<constructor><![CDATA[{
_popupshown=function(popup){
	popup.lastChild.checked=devPrefState()
}
  //**********************************************************
 //* actions
//****/
this.actions={//external
	 errorConsole:function(){toOpenWindowByType("global:console", "chrome://global/content/console.xul")}
	,reload:function(){document.location=document.location}
	,reopen:function(){
		((window.Services&&Services.ww)||Cc["@mozilla.org/embedcomp/window-watcher;1"].getService(Ci.nsIWindowWatcher))
		.openWindow(null, window.location.href, "_blank", 
			"chrome,extrachrome,resizable,modal=no," + /*"centerscreen"+*/'top=' + (screenY +10)+ ',left=' + (screenX+10),
			null).focus();		
		return;
	}
	,jsMirror:function(){toOpenWindowByType('shadia:jsMirror', "chrome://shadia/content/jsMirror/jsMirror.xul")}
	,inspector:function()   {toOpenWindowByType('shadia:inspector', "chrome://shadia/content/domMirror/domMirror.xul")}
	,chromeMirror:function(){toOpenWindowByType('shadia:chromeMirror', "chrome://shadia/content/chromeMirror/chromeMirror.xul")}
	,cssMirror:function()   {toOpenWindowByType('shadia:cssMirror', "chrome://shadia/content/cssMirror/cssMirror.xul")}
	,xulMirror:function()   {toOpenWindowByType('shadia:xulMirror', "chrome://shadia/content/xulMirror/xulMirror.xul")}
	,prefMirror:function()  {toOpenWindowByType('shadia:prefMirror', "chrome://shadia/content/prefMirror/prefMirror.xul")}
	,magnifier:function()   {$shadia.getLocalFile('chrome://shadia/content/magnifier.ahk').launch()}
	,restartApp:function()  {
		if(typeof Application=='object') Application.restart()
		else
		var appStartup = Ci.nsIAppStartup;
		Cc['@mozilla.org/toolkit/app-startup;1'].getService(appStartup).quit(appStartup.eRestart|appStartup.eAttemptQuit);	
	}
	,reloadChrome:function()  {Services.chromeReg.reloadChrome()}
	,refreshSkins:function()  {Services.chromeReg.refreshSkins()}
	,revealCurDoc:function()  {$shadia.getLocalFile(location.href).reveal()}
}
var activeactions=this.hasAttribute('buttons')?this.getAttribute('buttons').split(/ *, */):['reload','reopen','errorConsole','jsMirror','domi']
var actionNames={reload:'reload',reopen:':)',errorConsole:'errors',restartApp:'restart firefox'}
var actionsColors = {restartApp:'red',reloadChrome:'orange',reload:'orange',magnifier:'blue'}    
function toOpenWindowByType(inType, uri, features) {
    var windowManager = Cc['@mozilla.org/appshell/window-mediator;1'].getService(Ci.nsIWindowMediator);
    var topWindow = windowManager.getMostRecentWindow(inType);
	if(topWindow&&(topWindow!=window)){
        topWindow.focus();
    }else if(features){
        window.open(uri, "_blank", features);
    }else{
        window.open(uri, "_blank", "modal=no,chrome,extrachrome,menubar,resizable=yes,scrollbars,status,toolbar");
    }
}

//document.getAnonymousElementByAttribute(this.actionpopup.parentNode, 'class', 'menulist-dropmarker').className = "toolbarbutton-menu-dropmarker"

var el1=this.actionbar,el2=this.actionpopup
for(var i in actions){
	var newEl=document.createElement('menuitem')
	newEl.setAttribute('aID',i);
	newEl.setAttribute('label', actionNames[i]||i);	
	if(i in actionsColors)
		newEl.style.color = actionsColors[i];
	el2.appendChild(newEl)
	

	if(activeactions.indexOf(i)>-1){
		//newEl.style.color='graytext'
		newEl.style.color='green'
		var newEl=document.createElement('toolbarbutton')
		newEl.setAttribute('aID',i);
		newEl.setAttribute('label', actionNames[i]||i);
		el1.appendChild(newEl)
	}
}
//last child is checkbox
i='noCashe'
var newEl=document.createElement('menuseparator')
el2.appendChild(newEl)
var newEl=document.createElement('checkbox')
newEl.setAttribute('aID',i);
newEl.setAttribute('label', i);	
//newEl.setAttribute('type', 'checkbox')
el2.appendChild(newEl)
actions[i]=function(){
	var p =!devPrefState()
	$shadia.setPref("nglayout.debug.disable_xul_cache",    p, 'bool')
	$shadia.setPref("nglayout.debug.disable_xul_fastload", p, 'bool')
}
this.devPrefState = function devPrefState(){
	return $shadia.getPref("nglayout.debug.disable_xul_cache",    'bool')
	    && $shadia.getPref("nglayout.debug.disable_xul_fastload", 'bool')
}			

//inject shadia
Components.utils.import('resource://shadia/main.js')
if(!window.shadia)
	Services.scriptloader.loadSubScript('chrome://shadia/content/shadia.js', window);

}]]></constructor>
		
<field name="actionbar">
	document.getAnonymousElementByAttribute(this, "aID", "actionbar");
</field>
<field name="actionpopup">
	document.getAnonymousElementByAttribute(this, "aID", "actionpopup");
</field>
    
    </implementation>
	<handlers>
		<handler event="command">
			actions[event.originalTarget.getAttribute('aID')]()
		</handler>
	</handlers>
</binding>




 <binding id="search-textbox" extends="chrome://global/content/bindings/textbox.xml#textbox">
    <content>
      <children/>
      <xul:hbox class="textbox-input-box" flex="1" xbl:inherits="context,spellcheck" align="center">
        <html:input class="textbox-input" flex="1" anonid="input"
                    xbl:inherits="onfocus,onblur,value,type,maxlength,disabled,size,readonly,placeholder,tabindex,accesskey"/>
        <xul:deck class="textbox-search-icons" anonid="search-icons">		
          <xul:image class="textbox-search-icon"
                     onclick="document.getBindingParent(this)._iconClick();"
                     xbl:inherits="src=image,searchbutton,disabled"/>
          <xul:image class="textbox-search-clear"
                     onclick="document.getBindingParent(this)._clearSearch();"
                     xbl:inherits="disabled"/>
        </xul:deck>
		<xul:descripton anonid="match-count" class='textboxMatchCount' />
      </xul:hbox>
    </content>
    <implementation>
      <field name="_searchIcons">
        document.getAnonymousElementByAttribute(this, "anonid", "search-icons");
      </field>
	  <field name="_matchCounter">
        document.getAnonymousElementByAttribute(this, "anonid", "match-count");
      </field>
      <property name="matchCount"
                onset="this._matchCounter.textContent=val; return val;"
                onget="return this._matchCounter.textContent"/>
      <property name="searchButton"
                onget="return this.getAttribute('searchbutton') == 'true';">
        <setter><![CDATA[
          if (val) {
            this.setAttribute("searchbutton", "true");
          } else {
            this.removeAttribute("searchbutton");
          }
          return val;
        ]]></setter>
      </property>
      <property name="value"
                onget="return this.inputField.value;">
        <setter><![CDATA[
          this.inputField.value = val;

          if (val)
            this._searchIcons.selectedIndex = this.searchButton ? 0 : 1;
          else
            this._searchIcons.selectedIndex = 0;

          if (this._timer)
            clearTimeout(this._timer);

          return val;
        ]]></setter>
      </property>
      <constructor><![CDATA[       
      ]]></constructor>
      <method name="_fireCommand">
        <parameter name="me"/>
        <body><![CDATA[
          if (me._timer)
            clearTimeout(me._timer);
          me._timer = null;
          me.doCommand();
        ]]></body>
      </method>
      <method name="_iconClick">
        <body><![CDATA[
          if (this.searchButton)
            this._enterSearch();
          else
            this.focus();
        ]]></body>
      </method>
      <method name="_enterSearch">
        <body><![CDATA[
          if (this.disabled)
            return;
          if (this.searchButton && this.value && !this.readOnly)
            this._searchIcons.selectedIndex = 1;
          this._fireCommand(this);
        ]]></body>
      </method>
      <method name="_clearSearch">
        <body><![CDATA[
          if (!this.disabled && !this.readOnly && this.value) {
            this.value = "";
            this._fireCommand(this);
            this._searchIcons.selectedIndex = 0;
            return true;
          }
          return false;
        ]]></body>
      </method>
    </implementation>
    <handlers>
      <handler event="input">
        <![CDATA[
          if (this.searchButton) {
            this._searchIcons.selectedIndex = 0;
            return;
          }
          if (this._timer)
            clearTimeout(this._timer);
          this._timer = this.timeout && setTimeout(this._fireCommand, this.timeout, this);
          this._searchIcons.selectedIndex = this.value ? 1 : 0;
        ]]>
      </handler>
      <handler event="keypress" keycode="VK_ESCAPE">
        <![CDATA[
          if (this._clearSearch()) {
            event.preventDefault();
            event.stopPropagation();
          }
        ]]>
      </handler>
      <handler event="keypress" keycode="VK_RETURN">
        <![CDATA[
          this._enterSearch();
          event.preventDefault();
          event.stopPropagation();
        ]]>
      </handler>
    </handlers>
  </binding>




</bindings>
