<?xml version="1.0"?>  
 <?xml-stylesheet href="chrome://global/skin/" type="text/css"?>  



<window
	title="Sorting a custom tree view example"
	xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
	xmlns:h="http://www.w3.org/1999/xhtml"
	id="xqjs" width="600" height="300"
	persist="screenX screenY width height sizemode"
	onload="initAll()">

<h:head>
	<h:link rel="icon"        href="turnoff.gif"/>
	<h:link rel="stylesheet"  href="0.css" type="text/css" />
</h:head>
	<!--<script type="application/javascript" src="sort.js"/>-->
<script>
function initAll(){
init();init2();initActionBar(document.getElementById('actions'))

}

function go(s){
  _in.value = question = s ? s : _in.value;

  if(question == "")
    return;

  histList[histList.length-1] = question;
  histList[histList.length] = "";
  histPos = histList.length - 1;
  
  // Unfortunately, this has to happen *before* the JavaScript is run, so that 
  // print() output will go in the right place.
  _in.value='';
  recalculateInputHeight();
  printQuestion(question);

  if(_win.closed){
    printError("Target window has been closed.");
    return;
  }
  
  try { ("Shell" in _win) }
  catch(er){
    printError("The JavaScript Shell cannot access variables in the target window.  The most likely reason is that the target window now has a different page loaded and that page has a different hostname than the original page.");
    return;
  }

  if(!("Shell" in _win))
    initTarget(); // silent

  // Evaluate Shell.question using _win's eval (this is why eval isn't in the |with|, IIRC).
  _win.location.href = "javascript:try{ Shell.printAnswer(eval('with(Shell._scope) with(Shell.shellCommands){' + Shell.question + String.fromCharCode(10) + '}')); } catch(er){ Shell.printError(er); }; setTimeout(Shell.refocus, 0); void 0";
}
</script>

<script type="application/javascript;version=1.8">
<![CDATA[{

target=window
Ci=Components.interfaces
function supportedInterfaces(element){
	var ans=[]
	for each(var i in Ci){
		if(element instanceof i)
			ans.push(i)
	}
	return ans;
}
function setget(){
	return targetPropName+'>\n'+target.__lookupSetter__(targetPropName).toSource(5)+'\n'+target.__lookupGetter__(targetPropName).toSource(5)
}
function qi(){
	var ins= supportedInterfaces(target)
	target=target.QueryInterface(ins[0])
	
	data=getProps(target)
	inputFilter({target:document.getElementById("filter")})
}
function wr(){	
	target=unwrap(target)	
	data=getProps(target)
	inputFilter({target:document.getElementById("filter")})
}

say= function(el){
	var name=''
	if(typeof el==='object'){
		if(el.nodeName)
			name+=el.nodeName
		if(el.id)
			name+=" #"+el.id		
		if(el.className)
			name+="."+el.className.toString().replace(" ",".",'g')
		if(el.nodeValue)
			name+="="+value
		if(typeof el.hasAttribute=='function' &&el.hasAttribute('src'))
			name+="->"+el.getAttribute('src')
	}
	return name
}
say1= function(x){
	if(x == null) return String(x);
	var name,t = typeof x;
	switch(t){
		case 'object': break;
		//case 'string': return x;
		case 'function': 
			name=x.toSource()
			var i=name.indexOf("{")			
			var t=name.substr(i)=='{[native code]}'?'function[n]': 'function'
			
			name=t+name.substring(name.indexOf(" "),i)+'~'+x.length
			
			return name
		case 'xml': x = x.toXMLString();
		default: return  t+' '+x;
	}
	var name = x.toString()//O2S.call(x);//\u25b7'\u25ba'
	//for dom nodes
	
	if(x.nodeName)
		name+=x.nodeName
	if(x.id)
		name+="#"+x.id    
	if(x.className)
		name+="."+x.className.toString().replace(" ",".",'g')
	if(x.value)
		name+="="+x.value
	if(x.nodeValue)
		name+="@"+x.nodeValue
	var l=x.length
	if(typeof l==='number')
		name+='~'+l


	return name
	
}


const O2S = Object.prototype.toString;
function inspect(x){
  if(x == null) return String(x);
  var t = typeof x;
  switch(t){
    case 'object': break;
    case 'string': return x;
    case 'function': return x.toSource(0);
    case 'xml': x = x.toXMLString();
    default: return x +'  '+ t;
  }
  var os = O2S.call(x), t = os.slice(8, -1);
  switch(t){
    case 'XPCNativeWrapper': case 'XPCCrossOriginWrapper':
    let wos = O2S.call(unwrap(x));
    os = t[3] === 'N' ? '[object '+ t +' '+ wos +']' : wos;
    t += ':'+ wos.slice(8, -1);
  }
  var s, nt = x.nodeType;
  if(nt === 1) s = xmls(x.cloneNode(0)).replace(/ xmlns=".+?"/, '');
  else if(nt) s = x.nodeValue;
  if(s == null && (s = String(x)) === os)
    s = '{'+ keys(unwrap(x)).join(', ') +'}';
  return s +'  '+ t;
}
function unwrap(x){
   try { return XPCNativeWrapper(x).wrappedJSObject || x }
   catch([]){ return x }
 }


/*[element.QueryInterface(i),*/
var table = null;
var data = null;
var tree;
var filterText = "";
var number;

function init(){
	tree = document.getElementById("tree");
	number = document.getElementById("number");
	answer=document.getElementById("answer");
	loadTable();

//tree.startEditing(1, 3)
}
//
function getProps(targetObj){
	var data=[]
	for(var i in targetObj){
		var obj={object: i}
		try{
			obj.content=say1(targetObj[i])
		}catch(e){obj.content=say(e.toString())}
		data.push(obj);
	}
	return data;
}


/*******************/


function getProps(targetObj){
	targetObj=targetObj.wrappedJSObject||targetObj
	var data=[]
	var protoList=[targetObj]
	var p=targetObj
	while(p=p.__proto__)
		protoList.push(p)
	protoDepth=protoList.length
	for(var i in targetObj){
		var obj={object: i}
		try{
			obj.content=say1(targetObj[i])
		}catch(e){obj.content=say(e.toString())}
		data.push(obj);
		for(var j in protoList){
			if(protoList[j].hasOwnProperty(i))
				break
		}
		obj.depth=j
	}
	return data;
}
//this function is called every time the tree is sorted, filtered, or reloaded
function loadTable(){
	//remember scroll position. this is useful if this is an editable table
	//to prevent the user from losing the row they edited
	var topVisibleRow = null;
	if(table){
		topVisibleRow = getTopVisibleRow();
	}
	if(data == null){
		//put object loading code here. for our purposes, we'll hard code it.
		data = getProps(target);
		//the property names match the column ids in the xul. this way, we don't have to deal with
		//mapping between the two
	}
	if(filterText == ""){
		//show all of them
		table = data;
	} else {
		//filter out the ones we want to display
		table = [];
		data.forEach(function(element){
			//we'll match on every property
			var val=""
			for (var i in element){
				val+=prepareForComparison(element[i])
			}
			
			var lastI=val.indexOf(filterText)
			if( lastI != -1){
				table.push(element);
			}else{					
				for (var j=0;j<filterText.length;j++){
					lastI=val.indexOf(filterText[j],lastI+1)
					if(lastI===-1)
						break;
				}			
				if(lastI != -1){
					table.push(element);
				}
			}
		});
	}
	
	sort();
	//restore scroll position
	if(topVisibleRow){
		setTopVisibleRow(topVisibleRow);
	}
	
	number.value=table.length
}


	filter=function(){
		var table = [];
		var filterText=this.text.toLowerCase()
		var filterTextCase=this.text
		if(!filterText){
			var arr=[]
			this.propsArray.forEach(function(val){arr.push(val[1])})
			arr.sort()
			this.sortedArray=arr
			return;
		}
		this.propsArray.forEach(function(val){
			var lowVal=val[0]
			var priority=0,lastI=0,ind1=0;
			//exact match
			if(val[1].indexOf(filterTextCase)===0){
				table.push([-2,val[0],val[1]]);
				return;
			}
			//vague matches
			for(var j=0;j<filterText.length;j++){
				lastI = lowVal.indexOf(filterText[j],ind1);
				priority += lastI-ind1
				ind1 = lastI+1;
				if(lastI===-1)
					break;
			}
			if(lastI != -1){
				table.push([priority,val[0],val[1]]);
			}
		})
		table.sort(function (a, b){
			for(i in a){
			  if(a[i]<b[i]) return -1;
			  if(a[i]>b[i]) return 1;
			}
			return 0;
		})
		var arr=[]
		table.forEach(function(val){arr.push(val[2])})
		this.sortedArray=arr
	}



//generic custom tree view stuff
function treeView(table){
	this.rowCount = table.length;
	this.getCellText = function(row, col){
		return table[row][col.id];
	};
	this.getCellValue = function(row, col){
		return table[row][col.id];
	};
	this.setTree = function(treebox){
		this.treebox = treebox;
	};
	this.isEditable = function(row, col){
		return true;
	};
	
	this.isContainer = function(row){ return false; };
	this.isContainerOpen = function(row){ return false; };
	this.isContainerEmpty = function(row){ return true; };
	this.getParentIndex = function(row){ return 0; };
	this.getLevel = function(row){ return 0; };
	this.hasNextSibling = function(row){ return false; };

	this.isSeparator = function(row){ return false; };
	this.isSorted = function(){ return false; };
	this.getImageSrc = function(row,col){}// return "chrome://global/skin/checkbox/cbox-check.gif"; };
	this.getRowProperties = function(row,props){
		/* if((row %4) == 0){
			var aserv=Components.classes["@mozilla.org/atom-service;1"].
					  getService(Components.interfaces.nsIAtomService);
			props.AppendElement(aserv.getAtom("makeItBlue"));
		} */
	};
	this.getCellProperties = function(row,col,props){
		/* if((row %4) == 0){
			var aserv=Components.classes["@mozilla.org/atom-service;1"].
					  getService(Components.interfaces.nsIAtomService);
			props.AppendElement(aserv.getAtom("makeItBlue"));
		}	 */
	};
	this.getColumnProperties = function(colid,col,props){};
	this.cycleHeader = function(col, elem){};
}

function sort(column){
	var columnName;
	var order = tree.getAttribute("sortDirection") == "ascending" ? 1 : -1;
	//if the column is passed and it's already sorted by that column, reverse sort
	if(column){
		columnName = column.id;
		if(tree.getAttribute("sortResource") == columnName){
			order *= -1;
		}
	} else {
		columnName = tree.getAttribute("sortResource");
	}

	function columnSort(a, b){
		if(prepareForComparison(a[columnName]) > prepareForComparison(b[columnName])) return 1 * order;
		if(prepareForComparison(a[columnName]) < prepareForComparison(b[columnName])) return -1 * order;
		//tie breaker: name ascending is the second level sort
		if(columnName != "object"){
			if(prepareForComparison(a["object"]) > prepareForComparison(b["object"])) return 1;
			if(prepareForComparison(a["object"]) < prepareForComparison(b["object"])) return -1;
		}
		return 0;
	}
	table.sort(columnSort);
	//setting these will make the sort option persist
	tree.setAttribute("sortDirection", order == 1 ? "ascending" : "descending");
	tree.setAttribute("sortResource", columnName);
	tree.view = new treeView(table);
	//set the appropriate attributes to show to indicator
	var cols = tree.getElementsByTagName("treecol");
	for (var i = 0; i < cols.length; i++){
		cols[i].removeAttribute("sortDirection");
	}
	//document.getElementById(columnName).setAttribute("sortDirection", order == 1 ? "ascending" : "descending");
}

//prepares an object for easy comparison against another. for strings, lowercases them
function prepareForComparison(o){
	if(typeof o == "string"){
		return o.toLowerCase();
	}
	return o;
}

function getTopVisibleRow(){
	return tree.treeBoxObject.getFirstVisibleRow();
}

function setTopVisibleRow(topVisibleRow){	
	return tree.treeBoxObject.scrollToRow(Math.min(topVisibleRow, tree.treeBoxObject.getLastVisibleRow()));
}

function inputFilter(event){
	//do this now rather than doing it at every comparison
	var value = prepareForComparison(event.target.value);
	setFilter(value);
	document.getElementById("clearFilter").disabled = value.length == 0;
}

function clearFilter(){
	document.getElementById("clearFilter").disabled = true;
	var filterElement = document.getElementById("filter");
	filterElement.focus();
	filterElement.value = "";
	setFilter("");
}

function setFilter(text){
	filterText = text;
	loadTable();
}

//
function onTreeClicked(event){
	var tree = document.getElementById("tree");
	var tbo = tree.treeBoxObject;

	// get the row, col and child element at the point
	var row = { }, col = { }, child = { };
	tbo.getCellAt(event.clientX, event.clientY, row, col, child);
	try{
		var cellText = tree.view.getCellText(row.value, tbo.columns[0]);
	}catch(e){return}
	if(event.detail==2){
		target=target[cellText]
		
		data=getProps(target)
		inputFilter({target:document.getElementById("filter")})
	}else
	targetPropName=cellText;
	targetProp=target[cellText];
	answer.value=targetProp;
}
inspectElInJS=function(el){
	target=el		
	data=getProps(target)
	inputFilter({target:document.getElementById("filter")})
}

/**
 <tree id="my-tree" onclick="onTreeClicked(event)">
 
 var start = {}, end = {}, numRanges = tree.view.selection.getRangeCount(), selectedIndices = [];

  for (var t = 0; t < numRanges; t++){
    tree.view.selection.getRangeAt(t, start, end);
    for (var v = start.value; v <= end.value; v++)
      selectedIndices.push(v);
  }

  var view = document.getElementById("my-tree").view;
var sel = view.selection.currentIndex; //returns -1 if the tree is not focused
var treeItem = view.getItemAtIndex(sel);


function onTreeSelected(){
   var tree = document.getElementById("my-tree");
   var cellIndex = 0;
   var cellText = tree.view.getCellText(tree.currentIndex, tree.columns.getColumnAt(cellIndex));
   alert(cellText);
 }

 
  var treeView = tree.treeBoxObject.view;
 for (var i = 0; i < treeView.rowCount; i++){
   if(treeView.isContainer(i) && !treeView.isContainerOpen(i))
     treeView.toggleOpenState(i);
 }

// |c| is the XPCOM component instance
for each (i in Components.interfaces){ if(c instanceof i){ alert(i); } }

*/
}]]></script>



<script type="application/javascript;version=1.8">
<![CDATA[{
actions={
reload:function(){document.location=document.location},
reopen:function(){window.openDialog(document.location)},
setget:function(){answer.value=setget()},
si:function(){answer.value=supportedInterfaces(targetProp).join('\n')},
qi:qi,
wr:wr,
pl:function(){var protoList=[targetProp]
	var p=targetProp
	while(p=p.__proto__)
		protoList.push(p)
	answer.value=protoList.join('\n')
	}
}
actionNames={reload:'reload',reopen:':)'}
initActionBar=function(el){
	for(let i in actions){
		var newEl=document.createElement('button')
		newEl.setAttribute('onclick', "actions['"+i+"']()");
		newEl.setAttribute('label', actionNames[i]||i);
		newEl.setAttribute('tooltiptext', actions[i].toString());

		el.appendChild(newEl)
	}
	//el.removeChild(el)
}
}]]></script>




<toolbar id='actions'></toolbar>
<hbox flex='1'>
<vbox flex='1'>
	<hbox align="center" id="search-box">
		<label id="number" value="Filter"/>

		<label accesskey="F" control="filter">Filter</label>
		<textbox id="filter" oninput="inputFilter(event)" flex="1"/>
		<button id="clearFilter" oncommand="clearFilter()" label="Clear" accesskey="C" disabled="true"/>		
	</hbox>

	<tree id="tree" flex="1" persist="sortDirection sortResource" sortDirection="ascending" sortResource="description" 
		onselect="" 
		seltype="" 
		treelines="true" 
		editable="false"
		disableKeyNavigation="false">
		<treecols>
			<splitter class="tree-splitter"/>
			<treecol id="object" label="object" flex="1" persist="width ordinal hidden" onclick="sort(this)" class="sortDirectionIndicator" primary="true"/>
			<splitter class="tree-splitter"/>
			<treecol id="content" label="content" flex="1" persist="width ordinal hidden" onclick="sort(this)" class="sortDirectionIndicator" sortDirection="ascending"/>
			<splitter class="tree-splitter"/>
			<treecol id="depth" label="depth" flex="1" persist="width ordinal hidden" onclick="sort(this)" class="sortDirectionIndicator" sortDirection="ascending"/>
		</treecols>
		<treechildren id="tree-children" onclick='onTreeClicked(event)'	/>
	</tree>
</vbox>
<splitter></splitter>
	<textbox id ='answer' multiline='true' flex="1"/>
</hbox>


<script type='text/javascript'><![CDATA[{


var {classes: Cc, interfaces: Ci, utils: Cu, results: Cr} = Components;
Cu.import('resource://xqjs/Services.jsm');
Cu.import('resource://xqjs/Preferences.jsm');

var prefs = new Preferences('extensions.xqjs.');

function qs(s) document.querySelector(s);
function qsa(s) Array.slice(document.querySelectorAll(s));
function lmn(name, atrs){
  var lm = document.createElement(name);
  for(let key in atrs) lm.setAttribute(key, atrs[key]);
  return lm;
}
function empty(lm){
  while(lm.hasChildNodes()) lm.removeChild(lm.lastChild);
  return lm;
}
function main() Services.wm.getMostRecentWindow('navigator:browser');
function hurl() let(b = main().gBrowser) b.addTab.apply(b, arguments);


function fillwin(menu){
	const {nsIXULWindow, nsIDocShell} = Ci;
	const FS = (Cc['@mozilla.org/browser/favicon-service;1'].getService(Ci.nsIFaviconService));
	var type = Ci.nsIDocShellTreeItem['typeAll'], len = 0;
	var winum = Services.wm.getXULWindowEnumerator(null);
	while(winum.hasMoreElements()) try {
		let nwin=winum.getNext(); //add(nwin);
		let {docShell} = nwin.QueryInterface(nsIXULWindow);
		let dshenum = docShell.getDocShellEnumerator(type, nsIDocShell.ENUMERATE_FORWARDS);
		let i=0
		while(dshenum.hasMoreElements()) try {
			
			let nextDSh=dshenum.getNext()
			let win = (nextDSh.QueryInterface(nsIDocShell).contentViewer.DOMDocument.defaultView);
			
			if(win.location.href !== 'about:blank'); add(win,i,nextDSh.appType);
			i++
		} catch(e){ Cu.reportError(e) }
	} catch(e){ Cu.reportError(e) }

	function add(win,i,t){
		var label = fmtitle(win,i),
			mi = lmn('menuitem', {
				class: 'menuitem-iconic',
				image: FS.getFaviconImageForPage(win.document.documentURIObject).spec,
			});
		if(win === target.win) mi.setAttribute('disabled', true);
		
		mi.setAttribute('label', label);
		menu.appendChild(mi).win = win;
	}
menu.style.fontFamily='monospace'
	menu.hasChildNodes() ||menu.appendChild(lmn('menuitem', {label: '-', disabled: true}));
}

function fmtitle(win,i){
  const LEN = 80;
  var ttl = (i==0?'': "    :")+win.document.title.trim();
  var url = win.location.href.replace(/^http:\/+/, '');
  //if(!ttl) return ellipsize(url, LEN);
  ttl = ellipsize(ttl, LEN, true);
  
  return ttl + ' ->'+ ellipsize(url, LEN );
}
function ellipsize(str, num, end){
  if(num < 1) return '';
  if(str.length <= num){
	for(var i=num-str.length;i>0;i-- )
		str+='-'
	return str;  
  }
  const E = '..';
  if(end) return str.slice(0, num - 1) + E;
  var i = num / 2;
  return str.slice(0, num - i) + E + str.slice(str.length - i + 1);
}



///////////////////////////////////////////////////////////////////////////
//// InspectorTreeView
Cc =Components.classes
/*
 * TreeView object to manage the view of the DOM tree. Wraps and provides an
 * interface to an inIDOMView object
 */
function InspectorTreeView(){
  this.tree = document.getElementById("inspector-tree");
  this.treeBody = document.getElementById("inspector-tree-body");
  this.view = Cc["@mozilla.org/inspector/dom-view;1"].createInstance(Ci.inIDOMView);
  this.view.showSubDocuments = true;
  this.view.showAnonymousContent=true
  this.view.whatToShow = NodeFilter.SHOW_ALL;
  //this.view.whatToShow |= NodeFilter.SHOW_PROCESSING_INSTRUCTION
  this.view.whatToShow &= ~NodeFilter.SHOW_ATTRIBUTE;
  this.tree.view = this.view;
  
}

InspectorTreeView.prototype = {
  get editable(){ return false; },
  get selection(){ return this.view.selection; },

  /**
   * Initialize the view from the given window object.
   *
   * @param aWindow
   *        a top-level window object
   */
  initialize: function ITV_init(aWindow){
    this.contentWindow = aWindow;
    this.view.rootNode = aWindow.document;
    this.view.rebuild();
  },

  /**
   * Destroy the view.
   */
  destroy: function ITV_destroy()  {
    this.tree.treeBoxObject.view = null;
  },

  /**
   * Get the cell text at a given row and column.
   *
   * @param aRow
   *        The row index of the desired cell.
   * @param aCol
   *        The column index of the desired cell.
   * @returns string
   */
  getCellText: function ITV_getCellText(aRow, aCol){
    let rowIndex = this.selectionIndex;
    let na=this.view.getNodeFromRowIndex(rowIndex);
	na=say1(na)
	na+=this.view.getCellText(aRow, aCol);
	return na
  },

  /**
   * Get the index of the selected row.
   *
   * @returns number
   */
  get selectionIndex()  {
    return this.selection.currentIndex;
  },

  /**
   * Get the corresponding node for the currently-selected row in the tree.
   *
   * @returns DOMNode
   */
  get selectedNode()  {
    let rowIndex = this.selectionIndex;
    return this.view.getNodeFromRowIndex(rowIndex);
  },

  /**
   * Set the selected row in the table to the specified index.
   *
   * @param anIndex
   *        The index to set the selection to.
   */
  set selectedRow(anIndex)  {
    this.view.selection.select(anIndex);
    this.tree.treeBoxObject.ensureRowIsVisible(anIndex);
  },

  /**
   * Set the selected node to the specified document node.
   *
   * @param aNode
   *        The document node to select in the tree.
   */
  set selectedNode(aNode){
    let rowIndex = this.view.getRowIndexFromNode(aNode);
    if(rowIndex > -1){
      this.selectedRow = rowIndex;
    } else {
      this.selectElementInTree(aNode);
    }
  },

  /**
   * Select the given node in the tree, searching for and expanding rows
   * as-needed.
   *
   * @param aNode
   *        The document node to select in the three.
   * @returns boolean
   *          Whether a node was selected or not if not found.
   */
  selectElementInTree: function ITV_selectElementInTree(aNode){
    if(!aNode){
      this.view.selection.select(null);
      return false;      
    }
    // Keep searching until a pre-created ancestor is found, then 
    // open each ancestor until the found element is created.
    let domUtils = Cc["@mozilla.org/inspector/dom-utils;1"].getService(Ci.inIDOMUtils);
    let line = [];
    let parent = aNode;
    let index = null;

    while(parent){
		index = this.view.getRowIndexFromNode(parent);
		line.push(parent);
		if(index < 0){
			// Row for this node hasn't been created yet.
			parent = domUtils.getParentForNode(parent, this.view.showAnonymousContent);
		}else{
			break;
		}
    }

    // We have all the ancestors, now open them one-by-one from the top
    // to bottom.
    let lastIndex;
    let view = this.tree.treeBoxObject.view;

    for (let i = line.length - 1; i >= 0; --i){
		index = this.view.getRowIndexFromNode(line[i]);
		if(index < 0){
			// Can't find the row, so stop trying to descend.
			break;
		}
		if(i > 0 && !view.isContainerOpen(index)){
			view.toggleOpenState(index);
		}
		lastIndex = index;
    }

    if(lastIndex >= 0){
		this.selectedRow = lastIndex;
		return true;
    }    
    return false;
  },
};



function init2(){
	tree2=document.getElementById('inspector-tree')
	treeView1=new InspectorTreeView()
	treeView1.initialize(wind)
	//treeView1.selectedNode=wind.document.documentElement

	
for each(let menu in qsa('#Chrome, #Content'))
    menu.appendChild(lmn('menupopup', {
      oncommand: 'target(event.target.win)',
      onpopupshowing: 'fillwin(this)',
      onpopuphidden: 'empty(this)',
    }));
	
	
	
	copyTree=document.getElementById('copy-tree')
	copyTree.view=new copyViewOld(tree2.view)
	init22()
}


say= function(el){
	var name=''
	//typeof el==='object'
	if(el.nodeType==7){
		name+=el.target+' ->'+el.data
	}else{
		if(el.nodeName)
			name+=el.nodeName
		if(el.id)
			name+=" #"+el.id		
		if(el.className)
			name+="."+el.className.toString().replace(" ",".",'g')
		if(el.nodeValue)
			name+="="+el.nodeValue
		else if(el.value)
			name+=" ="+el.value
		if(typeof el.hasAttribute=='function' &&el.hasAttribute('src'))
			name+="->"+el.getAttribute('src')
		if(el.nodeName=='key'){
			name+=sayKey(el)
		}			
	}
	return name
}
sayKey=function(el){
	var name=''
	if(el.hasAttribute('key'))
		name+=' '+el.getAttribute('key')
	if(el.hasAttribute('keycode'))
		name+=' '+el.getAttribute('keycode')
	if(el.hasAttribute('modifiers'))
		name+=' '+el.getAttribute('modifiers')
	/*if(el.hasAttribute('command'))
		name+=' '+el.getAttribute('command')*/
	return name
}

function onTreeClicked2(event){
	 var tree=copyTree;
	var i=tree.currentIndex
	mNode=treeView1.view.getNodeFromRowIndex(i);
	document.getElementById('tb2').value=sayAttrs(mNode)||say(mNode)
	
}
sayAttrs=function(mNode){
	if(!mNode.attributes)
		return false;
	var ans=[mNode.nodeName]
	for(var i=0;i<mNode.attributes.length;i++){
		ans.push(mNode.attributes[i].name+'= '+mNode.attributes[i].value.toString())
	}
	ans.push('\nxmlns= '+mNode.namespaceURI)
	return ans.join('\n')
}
saveAttrs=function(mNode,text){
	var attrs=text.split('\n')
	for(var i=1;i<attrs.length-2;i++){
		mNode.setAttribute.apply(mNode,attrs[i].split(/= */))
	}
}
//generic custom tree view stuff
function copyViewOld(origView){
	//this.getNodeFromRowIndex=function(row){return origView.getNodeFromRowIndex(row);}
	this.rowCount = origView.rowCount;
	this.getCellText = function(row, col){
		let na=treeView1.view.getNodeFromRowIndex(row);
		na=say(na)
		return na;
	};
	this.getCellValue = function(row, col){
		return '1';
	};
	this.setTree = function(treebox){
		this.treebox = treebox;
	};
	this.isEditable = function(row, col){
		return true;
	};
	
	this.toggleOpenState= function(row){ 
		/*var origRow=copyTree.treeBoxObject.getFirstVisibleRow()
		tree2.treeBoxObject.scrollToRow(origRow)
		var r=origView.toggleOpenState(row);
		copyTree.view=new copyViewOld(tree2.view)
		
		origRow=tree2.treeBoxObject.getFirstVisibleRow()
		//alert(origRow)
		copyTree.treeBoxObject.scrollToRow(origRow)
		
		
		//var r=origView.toggleOpenState(row);
		//copyTree.treeBoxObject.invalidate()
		return r*/
		/*var n=origView.rowCount
		//dump('1---------------------------------',1)
		origView.toggleOpenState(row)
		//dump('2---------------------------------',2)
		n=origView.rowCount-n
		copyTree.treeBoxObject.rowCountChanged(row,n)
		//dump('3---------------------------------',3,n)*/
		origView.toggleOpenState(row)

		rebuild(4)
	};
	var checkRebuild=function(i){if(origView.rowCount!=copyTree.view.rowCount) rebuild(i)}
	var rebuild=function(i){
	dump(1,'rebuuild------',origView.rowCount,copyTree.view.rowCount,i)
		var origRow=copyTree.treeBoxObject.getFirstVisibleRow()
		var selIndex=copyTree.currentIndex
		tree2.treeBoxObject.scrollToRow(origRow)
		//origView.selection.select(selIndex)
		copyTree.view=new copyViewOld(tree2.view)
		
		origRow=tree2.treeBoxObject.getFirstVisibleRow()
		//alert(origRow)
		copyTree.treeBoxObject.scrollToRow(origRow)
		//selIndex=tree2.currentIndex
		dump('sel ',selIndex)
		copyTree.view.selection.select(selIndex)

	}

	this.isContainer = function(row){ checkRebuild(4);return origView.isContainer(row); };
	this.isContainerOpen = function(row){ return origView.isContainerOpen(row); };
	this.getLevel = function(row){ return origView.getLevel(row); };
	this.isContainerEmpty = function(row){ return origView.isContainerEmpty(row); };
	this.hasNextSibling = function(row,col){ return origView.hasNextSibling(row,col); };
	this.getParentIndex = function(row){ return origView.getParentIndex(row); };

	this.isSeparator = function(row){ return false; };
	this.isSorted = function(){ return false; };
	this.getImageSrc = function(row,col){}// return "chrome://global/skin/checkbox/cbox-check.gif"; };
	this.getRowProperties = function(row,props){
		/* if((row %4) == 0){
			var aserv=Components.classes["@mozilla.org/atom-service;1"].
					  getService(Components.interfaces.nsIAtomService);
			props.AppendElement(aserv.getAtom("makeItBlue"));
		} */
	};
	this.getCellProperties = function(row,col,props){
		/* if((row %4) == 0){
			var aserv=Components.classes["@mozilla.org/atom-service;1"].
					  getService(Components.interfaces.nsIAtomService);
			props.AppendElement(aserv.getAtom("makeItBlue"));
		}	 */
		origView.getCellProperties(row,tree2.columns.getColumnAt(0),props);
	};
	this.getColumnProperties = function(colid,col,props){
		//origView.getColumnProperties(colid,tree2.columns.getColumnAt(0),props);
	};
	this.cycleHeader = function(col, elem){};
	return this
}

dump= function(){
    var aMessage = "aMessage: ";
    for (var i = 0; i < arguments.length; ++i){
        aMessage += arguments[i] + " , ";
    }
    var consoleService = Components.classes['@mozilla.org/consoleservice;1'].getService(Components.interfaces.nsIConsoleService);
    consoleService.logStringMessage("" + aMessage);
}

var winService = Components.classes["@mozilla.org/appshell/window-mediator;1"].getService(Components.interfaces.nsIWindowMediator);
fWins=winService.getEnumerator('');
while(fWins.hasMoreElements()){			
	wind=fWins.getNext()			
} 
winService.getZOrderDOMWindowEnumerator('', true);




domUtils = Cc["@mozilla.org/inspector/dom-utils;1"].getService(Ci.inIDOMUtils);

	

sayAttrs2=function(mNode){
	
	var inspectedRules=domUtils.getCSSStyleRules(mNode)
	if(!inspectedRules)
		return
	
	var ans=[]
	if(mNode.style&&mNode.style.cssText)
		ans.push('style',mNode.style.cssText)
	for(var i = 0; i < inspectedRules.Count(); ++i){
		var rule= inspectedRules.GetElementAt(i).QueryInterface(Ci.nsIDOMCSSStyleRule);
		var href=rule.parentStyleSheet.href;  // Null means inline
		
		ans.push(href,rule.cssText)
	}
	inspectElInJS(rule)
	return ans.join('\n')
}

sayAttrs=function(mNode){
	var ans=[],parent=mNode
	while(parent){
		ans.push(sayAttrs2(mNode))
		parent=parent.parentNode
	}
	return ans.join('-->\n')
}














}]]></script>
		<panel id='pan' >
		 	<tree width='800' height='500' id="window-tree" class="plain" seltype="single" treelines="true" flex="1" tabindex='-1'
				hidecolumnpicker='true'>
				<treecols >
					<treecol id="colNodeName" hideheader="true" primary="true" flex="1" />
				</treecols>
				<treechildren id="inspector-tree-body"/>
			</tree> 
		</panel> 
<splitter collapse="after" state="collapsed2"><grippy/></splitter>
<hbox flex="1">
	<stack flex="1">
	<tree id="inspector-tree" class="plain" onclick="onTreeClicked2(event)"
            seltype="single" treelines="true" style='visibility:hidden'
            flex="1">
        <treecols >
          <treecol id="colNodeName" label="nodeName" primary="true" flex="1" />
          
        </treecols>
        <treechildren id="inspector-tree-body"/>
     </tree>
	 <tree id="copy-tree" class="plain" onselect="onTreeClicked2(event)" onclick='dump(event.target,event.originalTarget)'
            seltype="single"  treelines="true"  flex="1">
        <treecols>
          <treecol id="colNodeName" label="nodeName" primary="true" persist="width,hidden,ordinal" 
				flex="1" />          
        </treecols>
        <treechildren id="inspector-tree-body"/>
     </tree>
	 </stack>
	 <splitter collapse="after" state="collapsed2"><grippy/></splitter>
	<vbox flex="1">
		<textbox id='tb2' multiline='true' flex="1" style='min-width:0px;width:0px'/>
		<button oncommand="saveAttrs(mNode, document.getElementById('tb2').value)" style='min-width:0px;width:0px'/>
	</vbox>
</hbox>






<splitter collapse="after" state="collapsed2"><grippy/></splitter>
<hbox flex="1" >
	<stack1 flex="1" id='domViewer'>
		<tree id="domViewer-hidden-tree" class="plain" onselect="domViewerClick(event)" hidecolumnpicker='true'
				seltype="single" treelines="true" flex="1" style='visibility:hidde1n'>
			<treecols>
				<treecol id="colNodeName" hideheader="true" flex="1" primary="true" />          
			</treecols>
			<treechildren id="inspector-tree-h-body"/>
		</tree>
		<tree id="domViewer-main-tree" class="plain" onselect="domViewerClick(event)" hidecolumnpicker='true'
				seltype="single"  treelines="true"  flex="1">
			<treecols>
				<treecol id="colNodeName" hideheader="true" flex="1" primary="true" />          
			</treecols>
			<treechildren id="inspector-tree-body"/>
		</tree>
	</stack1>
	<splitter collapse="after" state="collapsed2"><grippy/></splitter>
	<vbox flex="1">
		<textbox id='tb2' multiline='true' flex="1" style='min-width:0px;width:0px'/>
		<button oncommand="saveAttrs(mNode, document.getElementById('tb2').value)" style='min-width:0px;width:0px'/>
	</vbox>
</hbox>

<script type="application/javascript" src="3.js"/>
<toolbar>
 <menubar id="menubar">
  <menu id="Chrome" label="Chrome" accesskey="h"/>
  <menu id="Content" label="Content" accesskey="o"/>
  <menu id="Actions" label="Actions" accesskey="A"/>
 </menubar>
</toolbar>
</window>


<!-- 
function asyncLoadDom(uri, callback){
  let doc = Cc['@mozilla.org/appshell/window-mediator;1']
              .getService(Ci.nsIWindowMediator)
              .getMostRecentWindow("mail:3pane").document;
  let frame = doc.createElement("iframe");
  frame.setAttribute("type", "content");
  frame.setAttribute("collapsed", "true");
  doc.documentElement.appendChild(frame);
  let ds = frame.webNavigation;
  ds.allowPlugins = ds.allowJavascript = ds.allowImages = false;
  ds.allowSubframes = false;
  ds.allowMetaRedirects = true;
  frame.addEventListener("load", function (event){
    if(event.originalTarget.location.href == "about:blank") return;
    callback(frame.contentDocument);
    doc.documentElement.removeChild(frame);
  }, true);
  frame.contentDocument.location.href = uri;
} 

let domUtils = Cc["@mozilla.org/inspector/dom-utils;1"].getService(Ci.inIDOMUtils);

parent=document.querySelector('browser').contentDocument
domUtils.getParentForNode(parent,true)-->