var jsd=Services.jsd
jsd.asyncOn(null)

eachJSContext= function(callback){
	var enumeratedContexts = [];
	var errors = []
	jsd.enumerateContexts( {enumerateContext: function(jscontext){
		try{
			if (!jscontext.isValid)
				return errors.push('invalid');

			var wrappedGlobal = jscontext.globalObject;
			if (!wrappedGlobal)
				return errors.push('!wrappedGlobal');

			var jsClass = wrappedGlobal.jsClassName	   
			if(jsClass == 'JSDGlobal')
				return errors.push('JSDGlobal')

			var unwrappedGlobal = wrappedGlobal.getWrappedValue();
			if (!unwrappedGlobal)
				return errors.push('!unwrappedGlobal');

			if (unwrappedGlobal instanceof Ci.nsISupports)
				var global = new XPCNativeWrapper(unwrappedGlobal);
			else
				var global = unwrappedGlobal;
			
			if (!global)
				return errors.push('!global')
			
			//callback(global, jscontext.tag, jsClass);
			
			enumeratedContexts.push(jscontext);
		}
		catch(e){
			FBTrace.sysout("jscontext dump FAILED "+e, e);
		}
	}});
	//return errors;
	return enumeratedContexts;
}
	
a=eachJSContext(function(a){
	

})


//jsd.clearFilters()
a[0].globalObject.getWrappedValue().eval(this.location)

$shadia.dump(1)

a

r=[];b=[]
for(i=1;i<a.length;i++){
	var className = 
r.push(cl=a[i].globalObject.jsClassName)
//if(cl=='nsXBLPrototypeScript compilation scope')
//if(cl=='Proxy')
if(cl!='JSDGlobal')
if(cl=='ContentFrameMessageManager')
if(cl=='nsXBLPrototypeScript compilation scope')
b.push(a[i].globalObject.getWrappedValue())
a[i].globalObject.getWrappedValue()
}

//a[2].globalObject.getWrappedValue().location

jsd.clearFilters()


//b[0].eval('function(a){debugger}')
b
r
jn.getParent(b[0])








/**********************************************************/



var jsd=Services.jsd
jsd.asyncOn(null)

eachJSContext= function(callback){
	var enumeratedContexts = [];
	var errors = []
	jsd.enumerateContexts( {enumerateContext: function(jscontext){
		try{
			if (!jscontext.isValid)
				return errors.push('invalid');

			var wrappedGlobal = jscontext.globalObject;
			if (!wrappedGlobal)
				return errors.push('!wrappedGlobal');

			var jsClass = wrappedGlobal.jsClassName	   
			if(jsClass == 'JSDGlobal')
				return errors.push('JSDGlobal')

			var unwrappedGlobal = wrappedGlobal.getWrappedValue();
			if (!unwrappedGlobal)
				return errors.push('!unwrappedGlobal');

			if (unwrappedGlobal instanceof Ci.nsISupports)
				var global = new XPCNativeWrapper(unwrappedGlobal);
			else
				var global = unwrappedGlobal;
			
			if (!global)
				return errors.push('!global')
			
			//callback(global, jscontext.tag, jsClass);
			
			enumeratedContexts.push(jscontext);
		}
		catch(e){
			FBTrace.sysout("jscontext dump FAILED "+e, e);
		}
	}});
	//return errors;
	return enumeratedContexts;
}
	
a=eachJSContext(function(a){
	

})

jsd.debuggerHook={
	onExecute: function(frame, type, rv){
		dump(frame, type, rv);
		dump(framesToString(frame))


		return Ci.jsdIExecutionHook.RETURN_CONTINUE
	} 
};


function framesToString(frame)
{
    var str = "";
    while (frame)
    {
        str += frameToString(frame)+"\n";
        frame = frame.callingFrame;
    }
    return str;
}

function frameToString(frame)
{
    if (!frame)
        return "< no frame >";

    if (!frame.script)
    {
        return "<bad frame>";
    }

    return frame.script.tag+" in "+frame.script.fileName+"@"+frame.line+"(pc="+frame.pc+")";
}
a[10].globalObject.getWrappedValue().eval('(function(a){debugger})()')